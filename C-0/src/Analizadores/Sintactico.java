
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\022\002\000\002\002" +
    "\005\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\005\005\000\002\023\002\000\002\004\011\000" +
    "\002\006\003\000\002\006\002\000\002\007\004\000\002" +
    "\007\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\014\006\000\002\014" +
    "\002\000\002\024\002\000\002\025\002\000\002\026\002" +
    "\000\002\027\002\000\002\015\015\000\002\030\002\000" +
    "\002\016\007\000\002\031\002\000\002\017\010\000\002" +
    "\032\002\000\002\020\010\000\002\033\002\000\002\021" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\006\024\000\025\006\001\002\000\004\024" +
    "\127\001\002\000\004\002\124\001\002\000\004\004\010" +
    "\001\002\000\004\002\ufffe\001\002\000\004\005\011\001" +
    "\002\000\004\022\012\001\002\000\016\023\ufff7\030\014" +
    "\031\026\032\022\033\030\035\023\001\002\000\004\023" +
    "\ufffa\001\002\000\004\004\067\001\002\000\016\023\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\001\002\000" +
    "\016\023\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\001\002\000\016\023\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\035\ufff5\001\002\000\016\023\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\035\uffd7\001\002\000\016\023\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\001\002\000\004" +
    "\004\062\001\002\000\004\021\uffdf\001\002\000\016\023" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\001\002" +
    "\000\016\023\ufff8\030\014\031\026\032\022\033\030\035" +
    "\023\001\002\000\004\004\033\001\002\000\016\023\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\001\002\000" +
    "\004\006\uffd9\001\002\000\004\006\032\001\002\000\016" +
    "\023\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\001" +
    "\002\000\004\034\034\001\002\000\004\005\uffdb\001\002" +
    "\000\004\005\036\001\002\000\004\006\037\001\002\000" +
    "\016\023\uffda\030\uffda\031\uffda\032\uffda\033\uffda\035\uffda" +
    "\001\002\000\016\023\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\035\ufff6\001\002\000\004\021\042\001\002\000\010" +
    "\004\044\035\043\036\045\001\002\000\032\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\001\002\000\010\004" +
    "\044\035\043\036\045\001\002\000\032\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\001\002\000\014\006\053" +
    "\007\050\010\047\011\052\012\051\001\002\000\010\004" +
    "\044\035\043\036\045\001\002\000\010\004\044\035\043" +
    "\036\045\001\002\000\010\004\044\035\043\036\045\001" +
    "\002\000\010\004\044\035\043\036\045\001\002\000\016" +
    "\023\uffde\030\uffde\031\uffde\032\uffde\033\uffde\035\uffde\001" +
    "\002\000\032\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\052" +
    "\012\051\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\001\002\000\032\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\052\012\051\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\001\002\000\032\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\052\012\051\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\001\002\000\032\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\052\012\051\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\001\002\000\014\005\061" +
    "\007\050\010\047\011\052\012\051\001\002\000\032\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\001\002\000" +
    "\010\004\044\035\043\036\045\001\002\000\014\005\uffdd" +
    "\007\050\010\047\011\052\012\051\001\002\000\004\005" +
    "\065\001\002\000\004\006\066\001\002\000\016\023\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\001\002\000" +
    "\010\004\uffe4\035\uffe4\036\uffe4\001\002\000\010\004\072" +
    "\035\043\036\045\001\002\000\010\005\uffe3\017\110\020" +
    "\107\001\002\000\010\004\072\035\043\036\045\001\002" +
    "\000\022\007\050\010\047\011\052\012\051\013\076\014" +
    "\077\015\074\016\075\001\002\000\010\004\044\035\043" +
    "\036\045\001\002\000\010\004\044\035\043\036\045\001" +
    "\002\000\010\004\044\035\043\036\045\001\002\000\010" +
    "\004\044\035\043\036\045\001\002\000\020\005\uffe9\007" +
    "\050\010\047\011\052\012\051\017\uffe9\020\uffe9\001\002" +
    "\000\020\005\uffe8\007\050\010\047\011\052\012\051\017" +
    "\uffe8\020\uffe8\001\002\000\020\005\uffea\007\050\010\047" +
    "\011\052\012\051\017\uffea\020\uffea\001\002\000\020\005" +
    "\uffeb\007\050\010\047\011\052\012\051\017\uffeb\020\uffeb" +
    "\001\002\000\010\005\106\017\110\020\107\001\002\000" +
    "\024\005\061\007\050\010\047\011\052\012\051\013\076" +
    "\014\077\015\074\016\075\001\002\000\010\005\uffe7\017" +
    "\uffe7\020\uffe7\001\002\000\010\004\072\035\043\036\045" +
    "\001\002\000\010\004\072\035\043\036\045\001\002\000" +
    "\010\005\uffed\017\uffed\020\uffed\001\002\000\010\005\uffec" +
    "\017\uffec\020\uffec\001\002\000\004\005\114\001\002\000" +
    "\004\022\115\001\002\000\016\023\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\035\uffe2\001\002\000\016\023\ufff7\030" +
    "\014\031\026\032\022\033\030\035\023\001\002\000\004" +
    "\023\uffe1\001\002\000\004\023\121\001\002\000\016\023" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0\001\002" +
    "\000\004\023\123\001\002\000\004\002\ufff9\001\002\000" +
    "\004\002\001\001\002\000\006\024\127\025\006\001\002" +
    "\000\006\024\ufffc\025\ufffc\001\002\000\004\035\130\001" +
    "\002\000\004\006\131\001\002\000\006\024\ufffb\025\ufffb" +
    "\001\002\000\006\024\ufffd\025\ufffd\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\010\002\004\004\006\022\003\001\001\000" +
    "\006\003\124\005\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\012\007\024\010\016\013\017\015\015" +
    "\016\026\017\020\020\023\021\014\001\001\000\004\023" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\040\001\001\000\002" +
    "\001\001\000\020\010\037\013\017\015\015\016\026\017" +
    "\020\020\023\021\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\045\001\001" +
    "\000\002\001\001\000\004\011\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\056\001\001\000\004" +
    "\011\055\001\001\000\004\011\054\001\001\000\004\011" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\062\001\001\000\004" +
    "\031\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\067\001\001\000\006\011\072" +
    "\012\070\001\001\000\004\025\112\001\001\000\006\011" +
    "\104\012\103\001\001\000\002\001\001\000\004\011\102" +
    "\001\001\000\004\011\101\001\001\000\004\011\100\001" +
    "\001\000\004\011\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\072" +
    "\012\111\001\001\000\006\011\072\012\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\115\001\001\000\024\006\116\007" +
    "\024\010\016\013\017\015\015\016\026\017\020\020\023" +
    "\021\014\001\001\000\004\027\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\132\005\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static String nombreFichero;

	//Inicia el parser
	public static void main(String args[]) {
		if (args.length != 1)
			System.out.println("No hay programa a procesar");
		else {
			try {
				Yylex lexico = new Yylex(new FileReader(args[0]));
				nombreFichero = (String)args[0];
				new parser(lexico).parse();
			}
			catch (Exception e) {
				System.out.println("El fichero del programa no existe o no esta abierto");
			}
		}
	}

	// Muestra el texto de un error
	public void report_error(String message) {
		System.err.println(message);
	}

	// Muestra un error de sintaxis
	public void syntax_error(Symbol actual) {
		if (actual.sym == sym.EOF)
			report_error("Intruccion incompleta en linea : "+InformacionCodigo.linea+
				       " Token : "+InformacionCodigo.token);
		else
			report_error("Error sintactico en linea : "+InformacionCodigo.linea+
				       " Token : "+InformacionCodigo.token);
	}

	// Muestra el texto de un error irrecuperable
	public void report_fatal_error(String message, Object info) {
		System.err.println(message);
	}

	// Muestra un mensaje cuando no se puede seguir analizando
	public void unrecovered_syntax_error(Symbol actual) {
	}

	//Muestra un mensaje de error con linea, token y mensaje
	public void error(String mensaje) {
		report_error("ERROR -> Linea: "+InformacionCodigo.linea+" Lexema: "+InformacionCodigo.token+" "+mensaje);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


	Tabla tabla;
	int cuentaWhiles;
	int cuentaDirecciones;
	CodigoIntermedio codigoIntermedio;
	int cuentaIf;
	Pila pilaIf;
	int cuentaBucle;
	Pila pilaBucle;
	int cuentaCadenas;
	Lista listaCadenas;

	void inicializar() {
		tabla = new Tabla();
		cuentaWhiles = 0;
		cuentaDirecciones = 9999;
		cuentaIf = 0;
		pilaIf = new Pila();
		cuentaBucle = 0;
		pilaBucle = new Pila();
		cuentaCadenas = 0;
		listaCadenas = new Lista();
		String nombre = parser.nombreFichero.substring(0,parser.nombreFichero.lastIndexOf("."));
		codigoIntermedio = new CodigoIntermedio(nombre+".ci");
		try {
			codigoIntermedio.abrirFicheroEscritura();
		} catch (IOException e) {
			System.out.println(Textos.ficheroCiNoExiste);
			codigoIntermedio.cerrarFicheroEscritura();
		}
	}

	boolean existeSimbolo(String id) {
		return tabla.existeSimbolo(id);
	}

	void addSimbolo(String id) {
		tabla.addSimbolo(id);
	}

	void setDireccionSimbolo(String id,int dir) {
		tabla.setDireccionSimbolo(id,dir);
	}

	Expresion suma(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("SUMAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion resta(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("RESTAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion producto(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("MULTIPLICAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion division(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("DIVIDIR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion entero(String e) {
		cuentaDirecciones++;
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_VALOR",
								e,
								null,
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion identificador(String id) {
		cuentaDirecciones++;
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf((tabla.getSimbolo(id)).getDireccion()),
								null,
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion or(Expresion c1,Expresion c2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("OR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion and(Expresion c1,Expresion c2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("AND",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion mayor(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYOR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion menor(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENOR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion igual(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("IGUAL",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion distinto(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("DISTINTO",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	void asignacion(String id,Expresion e) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf(e.getDireccion()),
								null,
								String.valueOf((tabla.getSimbolo(id)).getDireccion())));

	}

	void cerrarCI() {
		codigoIntermedio.cerrarFicheroEscritura();
	}

	void condicion(Expresion e,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"ELSE_"+String.valueOf(n)));
	}

	void saltarEtiqueta(String eti,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void ponerEtiqueta(String eti,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void condicion2(Expresion e,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"FINBUCLE_"+String.valueOf(n)));
	}

	void imprimirW(Expresion e) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("IMPRIMIR_ENTERO",
					String.valueOf(e.getDireccion()),
					null,
					null));
	}

	void imprimirS(String c,int cuenta) {
		listaCadenas.addCadena(c);
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("IMPRIMIR_CADENA",
					"CADENA_"+String.valueOf(cuenta),
					null,
					null));
	}

	void generarCadenas() {
		for(int i=0;i<listaCadenas.size();i++) {
			codigoIntermedio.guardarCuadrupla(new Cuadrupla("PONER_CADENA",
					"CADENA_"+String.valueOf(i+1),
					null,
					listaCadenas.getCadena(i)));
		}
	}

	void generarCF() {
		CodigoFinal codigoFinal = new CodigoFinal(codigoIntermedio,parser.nombreFichero);
		try {
			codigoFinal.traducirCodigo();
		} catch(Exception e) {}
	}

	void finPrograma() {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("FIN",null,null,null));
	}


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

			inicializar();
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= NT$0 Declaraciones Cuerpo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= Cuerpo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaraciones Declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaraciones ::= Declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= INT ID PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				if(existeSimbolo(id)) {
					parser.error(Textos.simboloRedeclarado);
				} else {
					addSimbolo(id);
					cuentaDirecciones++;
					setDireccionSimbolo(id,cuentaDirecciones);
				}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;

				finPrograma();
				generarCadenas();
				cerrarCI();
				generarCF();
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Cuerpo ::= MAIN PARENTIZQ PARENDER LLAVEIZQ BloqueSentencias NT$1 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueSentencias ::= Sentencias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueSentencias ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencias ::= Sentencias Sentencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencias",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencias ::= Sentencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencias",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expresion ::= Expresion SUMA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=suma(e1,e2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expresion ::= Expresion RESTA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=resta(e1,e2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expresion ::= Expresion PRODUCTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=producto(e1,e2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expresion ::= Expresion DIVISION Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=division(e1,e2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=entero(e);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				if(existeSimbolo(id)) {
					RESULT=identificador(id);
				} else {
					parser.error(Textos.simboloNoDeclarado);
					RESULT=identificador(null);
				}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expresion ::= PARENTIZQ Expresion PARENDER 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				RESULT=e;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Condicion ::= Condicion OR Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=or(c1,c2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Condicion ::= Condicion AND Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=and(c1,c2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Condicion ::= Expresion IGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=igual(e1,e2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Condicion ::= Expresion DISTINTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=distinto(e1,e2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Condicion ::= Expresion MAYOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=mayor(e1,e2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Condicion ::= Expresion MENOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
				RESULT=menor(e1,e2);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Condicion ::= PARENTIZQ Condicion PARENDER 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				RESULT=c;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SentElse ::= ELSE LLAVEIZQ BloqueSentencias LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentElse",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SentElse ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentElse",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;

				cuentaBucle++;
				pilaBucle.apilar(cuentaBucle);
				ponerEtiqueta("BUCLE",pilaBucle.verCima());
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

				condicion2(c,pilaBucle.verCima());
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

				cuentaWhiles++;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

				cuentaWhiles--;
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SentWhile ::= WHILE PARENTIZQ NT$2 Condicion NT$3 PARENDER LLAVEIZQ NT$4 BloqueSentencias NT$5 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		
				saltarEtiqueta("BUCLE",pilaBucle.verCima());
				ponerEtiqueta("FINBUCLE",pilaBucle.verCima());
				pilaBucle.desapilar();
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentWhile",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

			if(existeSimbolo(id)) {
			} else {
				parser.error(Textos.simboloNoDeclarado);
			}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SentAsignacion ::= ID NT$6 ASIGNAR Expresion PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
				asignacion(id,e);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentAsignacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

				imprimirW(e);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SentPutw ::= PUTW PARENTIZQ Expresion NT$7 PARENDER PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentPutw",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$8 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

				cuentaCadenas++;
				imprimirS(c,cuentaCadenas);
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SentPuts ::= PUTS PARENTIZQ CADENATEXTO NT$8 PARENDER PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentPuts",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$9 ::= 
            {
              Object RESULT =null;

			if(cuentaWhiles>0) {
			} else {
				parser.error(Textos.breakSinWhile);
			}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SentBreak ::= BREAK NT$9 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentBreak",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Sentencia ::= SentIf 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Sentencia ::= SentWhile 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Sentencia ::= SentAsignacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Sentencia ::= SentPutw 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Sentencia ::= SentPuts 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Sentencia ::= SentBreak 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
