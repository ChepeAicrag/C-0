package Analizadores;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.IOException;

//----> PARSER CODE --

parser code {:
	static String nombreFichero;

	//Inicia el parser
	public static void main(String args[]) {
		if (args.length != 1)
			System.out.println("No hay programa a procesar");
		else {
			try {
				Yylex lexico = new Yylex(new FileReader(args[0]));
				nombreFichero = (String)args[0];
				new parser(lexico).parse();
			}
			catch (Exception e) {
				System.out.println(e);
			}
		}
	}

	// Muestra el texto de un error
	public void report_error(String message) {
		System.err.println(message);
	}

	// Muestra un error de sintaxis
	public void syntax_error(Symbol actual) {
		if (actual.sym == sym.EOF)
			report_error("Intruccion incompleta en linea : "+InformacionCodigo.linea+
				       " Token : "+InformacionCodigo.token);
		else
			report_error("Error sintactico en linea : "+InformacionCodigo.linea+
				       " Token : "+InformacionCodigo.token);
	}

	// Muestra el texto de un error irrecuperable
	public void report_fatal_error(String message, Object info) {
		System.err.println(message);
	}

	// Muestra un mensaje cuando no se puede seguir analizando
	public void unrecovered_syntax_error(Symbol actual) {
	}

	//Muestra un mensaje de error con linea, token y mensaje
	public void error(String mensaje) {
		report_error("ERROR -> Linea: "+InformacionCodigo.linea+" Lexema: "+InformacionCodigo.token+" "+mensaje);
	}
:};


//----> ACTION CODE
 
action code {:
	Tabla tabla;
	int cuentaWhiles;
	int cuentaDirecciones;
	int cuentaIf;
	int cuentaBucle;
	int cuentaCadenas;

	void inicializar() {
		tabla = new Tabla();
		cuentaWhiles = 0;
		cuentaDirecciones = 9999;
		cuentaIf = 0;
		cuentaBucle = 0;
		cuentaCadenas = 0;
		String nombre = parser.nombreFichero.substring(0,parser.nombreFichero.lastIndexOf("."));
		
	}

	boolean existeSimbolo(String id) {
		return tabla.existeSimbolo(id);
	}

	void addSimbolo(String id) {
		tabla.addSimbolo(id);
	}

	void setDireccionSimbolo(String id,int dir) {
		tabla.setDireccionSimbolo(id,dir);
	}

	Expresion suma(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      
		return new Expresion(cuentaDirecciones);
	}

	Expresion resta(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      
		return new Expresion(cuentaDirecciones);
	}

	Expresion producto(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      
		return new Expresion(cuentaDirecciones);
	}

	Expresion division(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      
		return new Expresion(cuentaDirecciones);
	}

	Expresion entero(String e) {
		cuentaDirecciones++;
		
		return new Expresion(cuentaDirecciones);
	}

	Expresion identificador(String id) {
		cuentaDirecciones++;
		
		return new Expresion(cuentaDirecciones);
	}

	Expresion or(Expresion c1,Expresion c2) {
		cuentaDirecciones++;
	      
		return new Expresion(cuentaDirecciones);
	}

	Expresion and(Expresion c1,Expresion c2) {
		cuentaDirecciones++;
	      
		return new Expresion(cuentaDirecciones);
	}

	Expresion mayor(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	     
		return new Expresion(cuentaDirecciones);
	}

	Expresion menor(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      
		return new Expresion(cuentaDirecciones);
	}

	Expresion igual(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	     
		return new Expresion(cuentaDirecciones);
	}

	Expresion distinto(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      
		return new Expresion(cuentaDirecciones);
	}

	void asignacion(String id,Expresion e) {
		

	}

	void cerrarCI() {
		
	}

	void condicion(Expresion e,int n) {
		
	}

	void saltarEtiqueta(String eti,int n) {
		
	}

	void ponerEtiqueta(String eti,int n) {
		
	}

	void condicion2(Expresion e,int n) {
		
	}

	void finPrograma() {
		
	}

:}

//----> TERMINALES

terminal PARENTIZQ;
terminal PARENDER;
terminal PUNTOCOMA;
terminal SUMA;
terminal RESTA;
terminal PRODUCTO;
terminal DIVISION;
terminal MENOR;
terminal MAYOR;
terminal IGUAL;
terminal DISTINTO;
terminal OR;
terminal AND;
terminal ASIGNAR;
terminal LLAVEIZQ;
terminal LLAVEDER;
terminal INT;
terminal MAIN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal PUTS;
terminal PUTW;
terminal BREAK;
terminal String CADENATEXTO;
terminal String ID;
terminal String ENTERO;

//----> NO TERMINALES
non terminal Programa, Declaraciones, Cuerpo;
non terminal Declaracion;
non terminal BloqueSentencias;
non terminal Sentencias, Sentencia;
non terminal Expresion Expresion;
non terminal Expresion Condicion;
non terminal SentIf, SentElse;
non terminal SentWhile;
non terminal SentAsignacion;
non terminal SentPutw, SentPuts;
non terminal SentBreak;

//------>PRECEDENCIA
precedence left ASIGNAR;
precedence left OR, AND;
precedence left DISTINTO, IGUAL, MAYOR, MENOR;
precedence left SUMA, RESTA;
precedence right PRODUCTO, DIVISION;
precedence right PARENTIZQ, PARENDER;

start with Programa;

//Semantico

Programa ::= {: inicializar(); :} Declaraciones Cuerpo | Cuerpo;

Declaraciones ::= Declaraciones Declaracion | Declaracion;

Declaracion ::= INT ID:id PUNTOCOMA
			{:
				if(existeSimbolo(id)) {
					parser.error(Textos.simboloRedeclarado);
				} else {
					addSimbolo(id);
					cuentaDirecciones++;
					setDireccionSimbolo(id,cuentaDirecciones);
				}
			:}
		    ;

Cuerpo ::= MAIN PARENTIZQ PARENDER LLAVEIZQ BloqueSentencias LLAVEDER;

BloqueSentencias ::= Sentencias |;

Sentencias ::= Sentencias Sentencia | Sentencia;


Expresion ::= Expresion:e1 SUMA Expresion:e2
			{:
				RESULT=suma(e1,e2);
			:}
              |
		  Expresion:e1 RESTA Expresion:e2
			{:
				RESULT=resta(e1,e2);
			:}
		  |
              Expresion:e1 PRODUCTO Expresion:e2
			{:
				RESULT=producto(e1,e2);
			:}
		  |
		  Expresion:e1 DIVISION Expresion:e2
			{:
				RESULT=division(e1,e2);
			:}
		  |
		  ENTERO:e
			{:
				RESULT=entero(e);
			:}
		  |
		  ID:id
			{:
				if(existeSimbolo(id)) {
					RESULT=identificador(id);
				} else {
					parser.error(Textos.simboloNoDeclarado);
					RESULT=identificador(null);
				}
			:}
		  |
	   	  PARENTIZQ Expresion:e PARENDER
			{:
				RESULT=e;
			:}
		  ;

Condicion ::= Condicion:c1 OR Condicion:c2
			{:
				RESULT=or(c1,c2);
			:}
	        |
		  Condicion:c1 AND Condicion:c2
			{:
				RESULT=and(c1,c2);
			:}
		  |
      	  Expresion:e1 IGUAL Expresion:e2
			{:
				RESULT=igual(e1,e2);
			:}
		  |
		  Expresion:e1 DISTINTO Expresion:e2
			{:
				RESULT=distinto(e1,e2);
			:}
		  |
		  Expresion:e1 MAYOR Expresion:e2
			{:
				RESULT=mayor(e1,e2);
			:}
		  |
		  Expresion:e1 MENOR Expresion:e2
			{:
				RESULT=menor(e1,e2);
			:}
		  |
		  PARENTIZQ Condicion:c PARENDER
			{:
				RESULT=c;
			:}
              ;


SentElse ::= ELSE LLAVEIZQ BloqueSentencias LLAVEDER |;



SentAsignacion ::= ID:id
			{:
			if(existeSimbolo(id)) {
			} else {
				parser.error(Textos.simboloNoDeclarado);
			}
			:}
		 ASIGNAR Expresion:e PUNTOCOMA
			{:
				asignacion(id,e);
			:}
	         ;

SentPutw ::= PUTW PARENTIZQ Expresion:e
			
	       PARENDER PUNTOCOMA;

SentPuts ::= PUTS PARENTIZQ CADENATEXTO:c
			
	       PARENDER PUNTOCOMA;

SentBreak ::= BREAK
			{:
			if(cuentaWhiles>0) {
			} else {
				parser.error(Textos.breakSinWhile);
			}
			:}
		  PUNTOCOMA;

Sentencia ::= SentIf |
		  SentWhile |
		  SentAsignacion |
		  SentPutw |
		  SentPuts |
		  SentBreak;
