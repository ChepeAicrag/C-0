package Analizadores;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.IOException;

//----> PARSER CODE

parser code {:

:};

//----> ACTION CODE
 
action code {:

:};

//----> TERMINALES

terminal PARENTIZQ;
terminal PARENDER;
terminal PUNTOCOMA;
terminal SUMA;
terminal RESTA;
terminal PRODUCTO;
terminal DIVISION;
terminal MENOR;
terminal MAYOR;
terminal IGUAL;
terminal DISTINTO;
terminal OR;
terminal AND;
terminal ASIGNAR;
terminal LLAVEIZQ;
terminal LLAVEDER;
terminal INT;
terminal MAIN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal PUTS;
terminal PUTW;
terminal BREAK;
terminal String CADENATEXTO;
terminal String ID;
terminal String ENTERO;

//------>PRECEDENCIA
precedence left ASIGNAR;
precedence left OR, AND;
precedence left DISTINTO, IGUAL, MAYOR, MENOR;
precedence left SUMA, RESTA;
precedence right PRODUCTO, DIVISION;
precedence right PARENTIZQ, PARENDER;

start with Programa;

//Semantico

Programa ::= {:
			inicializar();
		 :}
		 Declaraciones Cuerpo | Cuerpo;

Declaraciones ::= Declaraciones Declaracion | Declaracion;

Declaracion ::= INT ID:id PUNTOCOMA
			{:
				if(existeSimbolo(id)) {
					parser.error(Textos.simboloRedeclarado);
				} else {
					addSimbolo(id);
					cuentaDirecciones++;
					setDireccionSimbolo(id,cuentaDirecciones);
				}
			:}
		    ;

Cuerpo ::= MAIN PARENTIZQ PARENDER LLAVEIZQ BloqueSentencias
			{:
				finPrograma();
				generarCadenas();
				cerrarCI();
				generarCF();
			:}
	     LLAVEDER;

BloqueSentencias ::= Sentencias |;

Sentencias ::= Sentencias Sentencia | Sentencia;


Expresion ::= Expresion:e1 SUMA Expresion:e2
			{:
				RESULT=suma(e1,e2);
			:}
              |
		  Expresion:e1 RESTA Expresion:e2
			{:
				RESULT=resta(e1,e2);
			:}
		  |
              Expresion:e1 PRODUCTO Expresion:e2
			{:
				RESULT=producto(e1,e2);
			:}
		  |
		  Expresion:e1 DIVISION Expresion:e2
			{:
				RESULT=division(e1,e2);
			:}
		  |
		  ENTERO:e
			{:
				RESULT=entero(e);
			:}
		  |
		  ID:id
			{:
				if(existeSimbolo(id)) {
					RESULT=identificador(id);
				} else {
					parser.error(Textos.simboloNoDeclarado);
					RESULT=identificador(null);
				}
			:}
		  |
	   	  PARENTIZQ Expresion:e PARENDER
			{:
				RESULT=e;
			:}
		  ;

Condicion ::= Condicion:c1 OR Condicion:c2
			{:
				RESULT=or(c1,c2);
			:}
	        |
		  Condicion:c1 AND Condicion:c2
			{:
				RESULT=and(c1,c2);
			:}
		  |
      	  Expresion:e1 IGUAL Expresion:e2
			{:
				RESULT=igual(e1,e2);
			:}
		  |
		  Expresion:e1 DISTINTO Expresion:e2
			{:
				RESULT=distinto(e1,e2);
			:}
		  |
		  Expresion:e1 MAYOR Expresion:e2
			{:
				RESULT=mayor(e1,e2);
			:}
		  |
		  Expresion:e1 MENOR Expresion:e2
			{:
				RESULT=menor(e1,e2);
			:}
		  |
		  PARENTIZQ Condicion:c PARENDER
			{:
				RESULT=c;
			:}
              ;
If ::= IF PARENTIZQ
			{:
				cuentaIf++;
				pilaIf.apilar(cuentaIf);
			:}
           Condicion:c
			{:
				condicion(c,pilaIf.verCima());
			:}
	     PARENDER LLAVEIZQ BloqueSentencias LLAVEDER
			{:
				saltarEtiqueta("FINIF",pilaIf.verCima());
				ponerEtiqueta("ELSE",pilaIf.verCima());
			:}
	     SentElse
			{:
				ponerEtiqueta("FINIF",pilaIf.verCima());
				pilaIf.desapilar();
			:}
           ;

SentElse ::= ELSE LLAVEIZQ BloqueSentencias LLAVEDER |;

SentWhile ::= WHILE PARENTIZQ
			{:
				cuentaBucle++;
				pilaBucle.apilar(cuentaBucle);
				ponerEtiqueta("BUCLE",pilaBucle.verCima());
			:}
		  Condicion:c
			{:
				condicion2(c,pilaBucle.verCima());
			:}
		  PARENDER LLAVEIZQ
			{:
				cuentaWhiles++;
			:}
		  BloqueSentencias
			{:
				cuentaWhiles--;
			:}
		  LLAVEDER
			{:
				saltarEtiqueta("BUCLE",pilaBucle.verCima());
				ponerEtiqueta("FINBUCLE",pilaBucle.verCima());
				pilaBucle.desapilar();
			:}
		  ;

SentAsignacion ::= ID:id
			{:
			if(existeSimbolo(id)) {
			} else {
				parser.error(Textos.simboloNoDeclarado);
			}
			:}
		 ASIGNAR Expresion:e PUNTOCOMA
			{:
				asignacion(id,e);
			:}
	         ;

SentPutw ::= PUTW PARENTIZQ Expresion:e
			{:
				imprimirW(e);
			:}
	       PARENDER PUNTOCOMA;

SentPuts ::= PUTS PARENTIZQ CADENATEXTO:c
			{:
				cuentaCadenas++;
				imprimirS(c,cuentaCadenas);
			:}
	       PARENDER PUNTOCOMA;

SentBreak ::= BREAK
			{:
			if(cuentaWhiles>0) {
			} else {
				parser.error(Textos.breakSinWhile);
			}
			:}
		  PUNTOCOMA;

Sentencia ::= SentIf |
		  SentWhile |
		  SentAsignacion |
		  SentPutw |
		  SentPuts |
		  SentBreak;
