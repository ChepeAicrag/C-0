package Analizadores;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.IOException;

//----> PARSER CODE --

parser code {:

:};


//----> ACTION CODE
 
action code {:

    void inicializar() 
    {
        tabla = new Table();
        cuentaWhiles = 0;
        cuentaDirecciones = 9999;
    }

    //CODIGO INTERMEDIO
    //CARGAR VALOR
    Expresion entero(String e) 
    {
        cuentaDirecciones++;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_VALOR", e, null, String.valueOf(cuentaDirecciones)));
        return new Expresion(cuentaDirecciones);
    }
    
    //CARGAR DIRECCION
    Expresion identificador(String id) 
    {
        cuentaDirecciones++;
        codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
        String.valueOf((tabla.getSimbolo(id)).getDireccion()), null, String.valueOf(cuentaDirecciones)));
        return new Expresion(cuentaDirecciones);
    }
    
    //SUMAR
    Expresion suma(Expresion e1,Expresion e2) 
    {
	cuentaDirecciones++;
	codigoIntermedio.guardarCuadrupla(new Cuadrupla("SUMAR",String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
	return new Expresion(cuentaDirecciones);
    }

    //MULTIPLICAR
    Expresion producto(Expresion e1,Expresion e2) 
    {
	cuentaDirecciones++;
	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MULTIPLICAR",String.valueOf(e1.getDireccion()),
                                                                    String.valueOf(e2.getDireccion()),
                                                                    String.valueOf(cuentaDirecciones)));
	return new Expresion(cuentaDirecciones);
    }

    
:};

//----> TERMINALES

terminal PARENTIZQ;
terminal PARENDER;
terminal PUNTOCOMA;
terminal SUMA;
terminal RESTA;
terminal PRODUCTO;
terminal DIVISION;
terminal MENOR;
terminal MAYOR;
terminal IGUAL;
terminal DISTINTO;
terminal OR;
terminal AND;
terminal ASIGNAR;
terminal LLAVEIZQ;
terminal LLAVEDER;
terminal INT;
terminal MAIN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal PUTS;
terminal PUTW;
terminal BREAK;
terminal String CADENATEXTO;
terminal String ID;
terminal String ENTERO;

//----> NO TERMINALES
non terminal Programa, Declaraciones, Cuerpo;
non terminal BloqueSentencias;
non terminal Declaracion;
non terminal Sentencias, Sentencia;

// PRECEDENCIAS

precedence left ASIGNAR;
precedence left OR, AND;
precedence left DISTINTO, IGUAL, MAYOR, MENOR;
precedence left SUMA, RESTA;
precedence right PRODUCTO, DIVISION;
precedence right PARENTIZQ, PARENDER;

start with Programa;

//----> REGLAS DE GRAMÁTICA

Programa ::= Declaraciones Cuerpo | Cuerpo;

Declaraciones ::= Declaracion Declaraciones | Declaracion;

Declaracion ::= INT ID PUNTOCOMA;

//----> Probando solo estructural del programa Cuerpo ::= MAIN PARENTIZQ PARENDER LLAVEIZQ BloqueSentencias LLAVEDER | MAIN PARENTIZQ PARENDER LLAVEIZQ LLAVEDER;

Cuerpo ::= MAIN PARENTIZQ PARENDER LLAVEIZQ BloqueSentencias LLAVEDER;

//----> Autor para sentencias vacías
 
BloqueSentencias ::= Sentencias | ;

Sentencias ::= Sentencias Sentencia | Sentencia;
