package Analizadores;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.IOException;

//----> PARSER CODE

parser code {:

:};

//----> ACTION CODE
 
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

action code {:

	Tabla tabla;
	int cuentaWhiles;
	int cuentaDirecciones;
	CodigoIntermedio codigoIntermedio;
	int cuentaIf;
	Pila pilaIf;
	int cuentaBucle;
	Pila pilaBucle;
	int cuentaCadenas;
	Lista listaCadenas;

	void inicializar() {
		tabla = new Tabla();
		cuentaWhiles = 0;
		cuentaDirecciones = 9999;
		cuentaIf = 0;
		pilaIf = new Pila();
		cuentaBucle = 0;
		pilaBucle = new Pila();
		cuentaCadenas = 0;
		listaCadenas = new Lista();
		String nombre = parser.nombreFichero.substring(0,parser.nombreFichero.lastIndexOf("."));
		codigoIntermedio = new CodigoIntermedio(nombre+".ci");
		try {
			codigoIntermedio.abrirFicheroEscritura();
		} catch (IOException e) {
			System.out.println(Textos.ficheroCiNoExiste);
			codigoIntermedio.cerrarFicheroEscritura();
		}
	}

	boolean existeSimbolo(String id) {
		return tabla.existeSimbolo(id);
	}

	void addSimbolo(String id) {
		tabla.addSimbolo(id);
	}

	void setDireccionSimbolo(String id,int dir) {
		tabla.setDireccionSimbolo(id,dir);
	}

	Expresion suma(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("SUMAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion resta(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("RESTAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion producto(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("MULTIPLICAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion division(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("DIVIDIR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion entero(String e) {
		cuentaDirecciones++;
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_VALOR",
								e,
								null,
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion identificador(String id) {
		cuentaDirecciones++;
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf((tabla.getSimbolo(id)).getDireccion()),
								null,
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion or(Expresion c1,Expresion c2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("OR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion and(Expresion c1,Expresion c2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("AND",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion mayor(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYOR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion menor(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENOR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion igual(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("IGUAL",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	Expresion distinto(Expresion e1,Expresion e2) {
		cuentaDirecciones++;
	      codigoIntermedio.guardarCuadrupla(new Cuadrupla("DISTINTO",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(cuentaDirecciones)));
		return new Expresion(cuentaDirecciones);
	}

	void asignacion(String id,Expresion e) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf(e.getDireccion()),
								null,
								String.valueOf((tabla.getSimbolo(id)).getDireccion())));

	}

	void cerrarCI() {
		codigoIntermedio.cerrarFicheroEscritura();
	}

	void condicion(Expresion e,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"ELSE_"+String.valueOf(n)));
	}

	void saltarEtiqueta(String eti,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void ponerEtiqueta(String eti,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void condicion2(Expresion e,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"FINBUCLE_"+String.valueOf(n)));
	}

	void imprimirW(Expresion e) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("IMPRIMIR_ENTERO",
					String.valueOf(e.getDireccion()),
					null,
					null));
	}

	void imprimirS(String c,int cuenta) {
		listaCadenas.addCadena(c);
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("IMPRIMIR_CADENA",
					"CADENA_"+String.valueOf(cuenta),
					null,
					null));
	}

	void generarCadenas() {
		for(int i=0;i<listaCadenas.size();i++) {
			codigoIntermedio.guardarCuadrupla(new Cuadrupla("PONER_CADENA",
					"CADENA_"+String.valueOf(i+1),
					null,
					listaCadenas.getCadena(i)));
		}
	}

	void generarCF() {
		CodigoFinal codigoFinal = new CodigoFinal(codigoIntermedio,parser.nombreFichero);
		try {
			codigoFinal.traducirCodigo();
		} catch(Exception e) {}
	}

	void finPrograma() {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("FIN",null,null,null));
	}

:}

